
{
	int MAXRUN = 800; // Tune it such that durationMs >= 500
	int MAXNUMINTS = 100; // at least 100
system_clock::time_point startTime, endTime;
double runTime = 0.0;
double runTime_cpp_int = 0.0;
double durationMs = 0.0;
int n = 10000; // measure the running time for various values of n, e.g., 10, 100, 500, 1000, 5000, 10000
for (int numInts = 0; numInts < MAXNUMINTS; numInts++) {
HugeInteger huge1(n); //creates a random integer of n digits
HugeInteger huge2(n); //creates a random integer of n digits
cpp_int c1(huge1.toString());
cpp_int c2(huge2.toString());
startTime = system_clock::now();
for (int numRun = 0; numRun < MAXRUN; numRun++) {
HugeInteger huge3 = huge1.add(huge2);
}
endTime = system_clock::now();
durationMs = (duration<double, std::milli>(endTime - startTime)).count();
runTime += durationMs / ((double)MAXRUN);
cout << "durationMs: " << durationMs << endl; // Tune MAXRUN such that durationMs >= 500
startTime = system_clock::now();
for (int numRun = 0; numRun < MAXRUN; numRun++) {
cpp_int c3 = c1 + c2;
}
endTime = system_clock::now();
durationMs = (duration<double, std::milli>(endTime - startTime)).count();
runTime_cpp_int += durationMs / ((double)MAXRUN);
}
runTime = runTime / ((double)MAXNUMINTS);
runTime_cpp_int = runTime_cpp_int / ((double)MAXNUMINTS);
cout << "Running time for HugeInteger add with n="<< n << " is:" << runTime << " ms" << endl;
cout << "Running time for cpp_int + with n=" << n << " is:" << runTime_cpp_int << " ms" << endl;
}